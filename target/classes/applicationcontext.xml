<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">


    <!--数据库配置信息，写在一个单独的文件里，执行文件的路径-->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!--声明数据源DataSource,作用是连接数据库-->
    <bean id="MyDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <!--连接池最多可以连接多少数据库，默认20-->
        <property name="maxActive" value="20"/>
    </bean>

    <!--声明mybatis中提供的SqlSessionFactoryBean类，这个类内部创建SqlSessionFactory-->
    <bean id="SqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--set注入，把数据库连接池赋给了dataSource属性-->
        <property name="dataSource" ref="MyDataSource"/>
        <!--
        mybatis主配置文件的位置，因为是在spring中指定mybatis主配置文件，所以要用classpath:
        configLocation:属性是Resource类型的，负责读取配置文件
        赋值使用 value 指定文件的路径
        -->
        <property name="configLocation" value="classpath:mybatis.xml"/>

    </bean>
    <!--创建dao对象，使用SqlSession的getMapper(StudentDao.class)
        MapperScannerConfigurer:在内部调用getMapper()生成每个dao接口的代理对象
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--指定SqlSessionFactory对象的id-->
        <property name="sqlSessionFactoryBeanName" value="SqlSessionFactory"/>
        <!--指定包名，包名是dao接口的包名
           MapperScannerConfigurer会扫描这个包中所有的接口，
           把每个接口都执行一次getMapper()方法，得到每个接口的dao对象
           创建好的dao对象放入spring容器中
           创建好的dao对象名称就是接口名首字母小写，例如studentDao
        -->
        <property name="basePackage" value="com.lkcoffee.dao"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="MyDataSource"></property>
    </bean>


    <aop:config>
        <!-- 配置事务通知和切入点表达式 -->
        <aop:advisor advice-ref="txAdvice" pointcut="execution(* com.lkcoffee.service.impl.*.*(..))"></aop:advisor>
    </aop:config>
    <!-- tx:advice标签：配置事务通知 -->
    <!-- id属性：给事务通知标签设置唯一标识，便于引用 -->
    <!-- transaction-manager属性：关联事务管理器 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!-- tx:method标签：配置具体的事务方法 -->
            <!-- name属性：指定方法名，可以使用星号代表多个字符 -->
            <tx:method name="get*" read-only="true"/>
            <tx:method name="query*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>

            <!-- read-only属性：设置只读属性 -->
            <!-- rollback-for属性：设置回滚的异常 -->
            <!-- no-rollback-for属性：设置不回滚的异常 -->
            <!-- isolation属性：设置事务的隔离级别 -->
            <!-- timeout属性：设置事务的超时属性 -->
            <!-- propagation属性：设置事务的传播行为 -->

            <tx:method name="delete*" read-only="false" rollback-for="java.lang.Exception" propagation="REQUIRED"/>
            <tx:method name="buy*" read-only="false" rollback-for="java.lang.Exception" propagation="REQUIRED"/>
        </tx:attributes>
    </tx:advice>



    <!--声明Service-->
    <bean id="ProductServiceImpl" class="com.lkcoffee.service.impl.ProductServiceImpl">
        <property name="productDao" ref="productDao"/>
    </bean>

    <bean id="InventoryServiceImpl" class="com.lkcoffee.service.impl.InvertoryServiceImpl">
        <property name="inventoryDao" ref="inventoryDao"/>
    </bean>


    <bean id="BuyCoffeeImpl" class="com.lkcoffee.service.impl.BuyCoffeeImpl">
        <property name="productDao" ref="productDao"/>
    </bean>
</beans>